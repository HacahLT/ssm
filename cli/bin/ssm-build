#!/usr/bin/env node

var program = require('commander')
  , path = require('path')
  , spawn = require('child_process').spawn;


program
//  .option('-l, --local', 'build using a local version of SSM')
  .option('-o, --output [path]', 'the directory for the builds', path.join(process.cwd(), 'ssm_model'))
  .parse(process.argv);

console.log('Building the model locally...');

var pathDatapackage;

if(!process.argv[2]){
  console.error('\033[91mFAIL\033[0m: invalid usage, path to datapackage.json is missing (ssm build <path> [options])');
  process.exit(1);
} else {
  pathDatapackage = path.normalize(process.argv[2]);
}

var tplter = [
  "import os",
  "from ssm.Builder import Builder",
  "path_model_coded_in_C = '" + path.normalize(program.output) + "'",
  "path_model_datapackage = '" + pathDatapackage + "'",
  "b = Builder(path_model_coded_in_C, path_model_datapackage)",
  "b.prepare()",
  "b.code()",
  "b.write_data()"
].join('\n');

var templater = spawn('python', ['-c', tplter]);
templater.stdout.pipe(process.stdout);
templater.stderr.pipe(process.stderr);

templater.on('exit', function (code) {

  console.log(path.join(program.output, 'C', 'templates'));

  if(code === 0) {
    var make = spawn('make', ['install'], {cwd: path.join(program.output, 'C', 'templates')});
    make.stdout.pipe(process.stdout);
    make.stderr.pipe(process.stderr);

    make.on('exit', function (code) {
      if(code === 0){
        console.log('\033[92mSUCCESS\033[0m: model has been created in %s.', program.output);
      } else {
        console.log('\033[91mFAIL\033[0m: could not build the model (%s).', code);
      }
    });
  } else {
    console.log('\033[91mFAIL\033[0m: could not build the model (%s).', code);
  }

});
