#!/usr/bin/env node

var program = require('commander')
  , fs = require('fs')
  , path = require('path')
  , util = require('util')
  , links = require('../lib/links')
  , resolvePath = require('../lib/util').resolvePath;

program
  .usage('[package.json] [options]')
  .option('-q, --quiet', 'silence')
  .option('-f, --force', 'overwrite pre-existing analytics')
  .parse(process.argv);

//patch Math.random to use a seed
if(program.seed){
  seed(program.seed, {global: true});
}

var pathDpkg = (program.args[0]) ? resolvePath(program.args[0]): path.resolve('package.json')
  , dpkgRoot = path.dirname(pathDpkg);

try {
  var dpkg = JSON.parse(fs.readFileSync(pathDpkg));
} catch (e){
  console.error(e.message);
  process.exit(1);  
}

var covariance = dpkg.resources.filter(function(x){return x.name === 'covariance'})[0];
if(!covariance){
  console.error('\033[91mFAIL\033[0m: no covariance resource in data package');
  process.exit(1);  
}

function fail(err){
  console.error('\033[91mFAIL\033[0m: ' + err.message);
  process.exit(1);  
};

//TODO get date end and date end +1
links.resolve(dpkgRoot, dpkg, dpkg.model.data, function(err, data){

  if(err) return fail(err);

  //begining of prediction (date of last data point)
  var start = data
    .map(function(x, i){
      var dateKey = dpkg.model.data[i].require.fields[0];
      return x.data[x.data.length-1][dateKey]; 
    })
    .sort(function(a,b){
      return a<b?1:a>b?-1:0;
    })[0];

  var end = new Date(start.getTime()); //copy dateObject
  end.setFullYear(end.getFullYear()+1); //prediction for 1 year

  //get ISO8601 date (YYYY-MM-DD (SSM does not support datetime yet))
  start = start.toISOString().split('T')[0];
  end = end.toISOString().split('T')[0];
      
  var analytics = [
    {
      name: 'random-lhs',
      run: [
        {
          command: 'ssm lhs $IN.dpkg -o $OUT.out --samples 50', timeout: '00:01:00',
          inputs: [ { path: 'package.json', name: 'dpkg' } ],
          outputs: [ { path: 'results/lhs/lhs.json', save: { resource: 'lhs' }, name: 'out' } ]
        }
      ]
    },

    {
      name: 'lhs-simplex',
      map: [
        {
          command: './simplex', args: ['--root', '$ROOT/results/lhs_simplex' , '-M', 10000, '--next', 'mle_', '--id', '$ID', '--prior'], cwd: 'bin', timeout: '00:01:00',
          inputs: [ { resource: 'lhs', collection: true, stdin: true } ],
          outputs: [ { path: 'results/lhs_simplex/mle_*.json' } ]
        },
        {
          repeat: 3,
          command: './simplex', args: ['--root', '$ROOT/results/lhs_simplex' , '-M', 10000, '--next', 'mle_', '--id', '$ID', '--prior'], cwd: 'bin', timeout: '00:01:00',
          inputs: [ { path: 'results/lhs_simplex/mle_*.json', stdin: true } ],
          outputs: [ { path: 'results/lhs_simplex/mle_*.json' } ]
        }
      ],
      reduce: [
        {
          command: 'ssm reduce $ROOT/results/lhs_simplex --by log_ltp --summary $OUT.out', timeout: '00:01:00',
          inputs: [ { path: 'results/lhs_simplex/mle_*.json' } ],
          outputs: [ { path: 'results/lhs_simplex/start_pmcmc.json', save: { resource: 'start_pmcmc' }, name: 'out' } ]
        }
      ]
    },

    {
      name: 'pmcmc',
      map: [
        {
          command: './pmcmc', 
          args: ['--root', '$ROOT/results/pmcmc' , '-M', 100000, '--next', 'map_', '--id', '$ID'], cwd: 'bin', timeout: '01:00:00',
          inputs: [ { resource: 'start_pmcmc', replicate: 2, stdin: true } ],
          outputs: [
            { path: 'results/pmcmc/map_*.json' }
          ]
        },
	{
          command: './pmcmc', 
          args: ['--root', '$ROOT/results/pmcmc' , '-M', 100000, '--next', 'map_', '--id', '$ID', '--trace', '--traj'], cwd: 'bin', timeout: '01:00:00',
          inputs: [ { path: 'results/pmcmc/map_*.json', stdin: true } ],
          outputs: [
            { path: 'results/pmcmc/map_*.json', save: { resource: 'pmcmc_map_*' } },
	    { path: 'results/pmcmc/trace_*.csv' },
            { path: 'results/pmcmc/X_*.csv' }
          ]
        }
      ],
      reduce: [
        {
          command: 'ssm reduce $ROOT/results/pmcmc --by DIC --trace $OUT.trace --traj $OUT.traj --summary $OUT.map', timeout: '01:00:00',
          inputs: [ { resource: 'pmcmc_map_*' } ],
          outputs: [
            { path: 'results/pmcmc/trace.csv', save: { resource: 'pmcmc_trace' }, name: 'trace' },
            { path: 'results/pmcmc/X.csv', save: { resource: 'pmcmc_traj' }, name: 'traj' },
            { path: 'results/pmcmc/map.json', save: { resource: 'pmcmc_map' }, name: 'map' }
          ]
        }
      ]
    },

    {
      name: 'predict',
      run: [
        {
          command: util.format('ssm predict $IN.dpkg $IN.traj $IN.trace %s | ./simul --root $ROOT/results/predict --traj --start %s --end %s', start, start, end), cwd: 'bin', timeout: '00:00:00',
          inputs: [ 
            { path: 'package.json', name: 'dpkg' },
            { resource: 'pmcmc_traj', name: 'traj' }, 
            { resource: 'pmcmc_trace', name: 'trace' }
          ],
          outputs: [ { path: 'results/predict/X_0.csv', save: { resource: 'predict' } } ]
        }
      ]
    }

  ];
  
  if( ('analytics' in dpkg) && !program.force){
    console.error('\033[91mFAIL\033[0m: analytics already exists in package.json run with --force to overwrite');
    process.exit(1);
  } else {
    dpkg.analytics = analytics;
  }

  fs.writeFile(pathDpkg, JSON.stringify(dpkg, null, 2), function(err){
    if(err) return fail(err);
    if(!program.quiet){
      console.log('\033[92mSUCCESS\033[0m: analytics has been added to %s', pathDpkg);
    }
  });

});
