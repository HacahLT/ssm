#!/usr/bin/env node

var program = require('commander')
  , fs = require('fs')
  , path = require('path')
  , util = require('util')
  , links = require('../lib/links')
  , mkdirp = require('mkdirp')
  , resolvePath = require('../lib/util').resolvePath;

program
  .option('-o, --output [path]', 'path to the datapackage container', resolvePath, path.resolve('ssm_model'))
  .option('-v, --verbose', 'verbose mode')
  .parse(process.argv);

//patch Math.random to use a seed
if(program.seed){
  seed(program.seed, {global: true});
}

if(!program.args[0]) {
  console.error('\033[91mFAIL\033[0m: Invalid usage, ssm bootstrap <package.json>');
  process.exit(1);
} else { //resolve ~ (if any)
  program.args[0] = resolvePath(program.args[0]);
}

try {
  var dpkg = JSON.parse(fs.readFileSync(program.args[0]));
} catch (e){
  emitter.emit('error', e.message);
  process.exit(1);  
}

var dpkgRoot = path.dirname(program.args[0]);

var covariance = dpkg.resources.filter(function(x){return x.name === 'covariance'})[0];
if(!covariance){
  console.error('\033[91mFAIL\033[0m: no covariance resource in data package');
  process.exit(1);  
}

function fail(err){
  console.error('\033[91mFAIL\033[0m: ' + err.message);
  process.exit(1);  
};

//TODO get date end and date end +1
links.resolve(dpkgRoot, dpkg, dpkg.model.data, function(err, data){

  //begining of prediction (date of last data point)
  var start = data
    .map(function(x, i){
      var dateKey = dpkg.model.data[i].data[0].field;
      return x.data[x.data.length-1][dateKey]; 
    })
    .sort(function(a,b){
      return a<b?1:a>b?-1:0;
    })[0];

  var end = new Date(start.getTime());
  end.setFullYear(end.getFullYear()+1); //prediction for 1 year

  //convert to ISO8601 date (so in UTC (JS date are in local time))
  start = start.toISOString().split('T')[0];
  end = end.toISOString().split('T')[0];

  mkdirp(path.join(program.output, 'node_modules'), function(err){
    if(err) return fail(err);

    mkdirp(path.join(program.output, 'data'), function(err){
      if(err) return fail(err);
      
      var dep = {};
      dep[dpkg.name] = dpkg.version;

      var d = {
        name: 'lhs',
        version: '0.0.0',
        'private': true,
        dataDependencies: dep,
        pipeline: [
          {
            name: 'random-lhs',
            run: [
              {
                command: 'ssm', args: ['lhs', '$IN.dpkg', '-o', '$OUT.out'], cwd: '.', timeout: '00:01:00',
                inputs: [ { path: util.format('node_modules/%s/package.json', dpkg.name), name: 'dpkg' } ],
                outputs: [ { path: 'data/lhs.json', save: { resource: 'lhs' }, name: 'out' } ]
              }
            ]
          },
          {
            name: 'lhs-simplex',
            map: [
              {
                command: 'simplex', args: ['--root', '$ROOT/results/lhs_simplex' , '-M', 10000, '--next', 'mle_', '--id', '$ID', '--prior'], cwd: '.', timeout: '00:01:00',
                inputs: [ { resource: 'lhs', collection: true, sdtin: true } ],
                outputs: [ { path: 'results/lhs_simplex/mle_*.json' } ]
              },
              {
                repeat: 3,
                command: 'simplex', args: ['--root', '$ROOT/results/lhs_simplex' , '-M', 10000, '--next', 'mle_', '--id', '$ID', '--prior'], cwd: '.', timeout: '00:01:00',
                inputs: [ { path: 'results/lhs_simplex/mle_*.json', sdtin: true } ],
                outputs: [ { path: 'results/lhs_simplex/mle_*.json' } ]
              }
            ],
            reduce: [
              {
                command: 'ssm', args: ['reduce', '$ROOT/results/lhs_simplex', '--by', 'log_ltp', '--summary', '$OUT.out'], cwd: '.', timeout: '00:01:00',
                inputs: [ { path: 'results/lhs_simplex/mle_*.json' } ],
                outputs: [ { path: 'data/start_pmcmc.json', save: { resource: 'start_pmcmc' }, name: 'out' } ]
              }
            ]
          },
          {
            name: 'pmcmc',
            map: [
              {
                command: 'pmcmc',
                args: ['--root', '$ROOT/results/pmcmc' , '-M', 100000, '--next', 'map_', '--id', '$ID', '--trace', '--traj'], cwd: '.', timeout: '01:00:00',
                inputs: [ { resource: 'start_pmcmc', replicate: 2, sdtin: true } ],
                outputs: [
                  { path: 'results/pmcmc/map_*.json', save: { resource: 'pmcmc_map_*' } },
                  { path: 'results/pmcmc/trace_*.csv' },
                  { path: 'results/pmcmc/X_*.csv' }
                ]
              }
            ],
            reduce: [
              {
                command: 'ssm', args: ['reduce', '$ROOT/results/pmcmc', '--by', 'DIC', '--trace', '$OUT.trace', '--traj', '$OUT.traj'], cwd: '.', timeout: '01:00:00',
                inputs: [ { resource: 'pmcmc_map_*' } ],
                outputs: [
                  { path: 'results/pmcmc/trace.csv', save: { resource: 'pmcmc_trace' }, name: 'trace' },
                  { path: 'results/pmcmc/X.csv', save: { resource: 'pmcmc_traj' }, name: 'traj' }
                ]
              }
            ]
          },
          {
            name: 'predict',
            run: [
              {
                command: util.format('ssm simul $IN.traj $IN.trace %s | ./simul --root $ROOT/results/predict --traj --start %s --end %s', start, start, end), cwd: '.', timeout: '00:01:00',
                inputs: [ 
                  { resource: 'pmcmc_traj', name: 'traj' }, 
                  { resource: 'pmcmc_trace', name: 'trace' }
                ],
                outputs: [ { path: 'results/predict/X_0.csv', save: { resource: 'predict' } } ]
              }
            ]
          }
        ]
      };
      
      fs.writeFile(path.join(program.output, 'package.json'), JSON.stringify(d, null, 2), function(err){
        if(err) return fail(err);

        fs.writeFile(path.join(program.output, 'node_modules', 'package.json'), JSON.stringify(dpkg, null, 2), function(err){
          if(err) return fail(err);

          if(program.verbose){
            console.log('\033[92mSUCCESS\033[0m: boostrapped in %s', program.output);
          }
        });

      });

    });

  });

});
