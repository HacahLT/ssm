#!/usr/bin/env node

var program = require('commander')
  , path = require('path')
  , spawn = require('child_process').spawn
  , resolvePath = require('../lib/util').resolvePath;

program
  .option('-o, --output [path]', 'the directory for the builds', resolvePath, path.resolve('ssm_model'))
  .parse(process.argv);

console.log('Building the model locally...');

var pathDatapackage;

if(!program.args[0]){
  console.error('\033[91mFAIL\033[0m: invalid usage, path to datapackage.json is missing (ssm build <path> [options])');
  process.exit(1);
} else {
  pathDatapackage = resolvePath(program.args[0]);
}

var tplter = [
  "import os",
  "import sys",
  "sys.path.append('" + path.resolve(__dirname, '..', 'src') + "')",
  "from Builder import Builder",
  "path_model_coded_in_C = '" + program.output + "'",
  "path_model_datapackage = '" + pathDatapackage + "'",
  "b = Builder(path_model_coded_in_C, path_model_datapackage)",
  "b.prepare()",
  "b.code()",
  "b.write_data()"
].join('\n');


var templater = spawn('python', ['-c', tplter]);
templater.stdout.pipe(process.stdout);
templater.stderr.pipe(process.stderr);

templater.on('exit', function (code) {

  if(code === 0) {
    var make = spawn('make', ['install'], {cwd: path.join(program.output, 'C', 'templates')});
    make.stdout.pipe(process.stdout);
    make.stderr.pipe(process.stderr);

    make.on('exit', function (code) {
      if(code === 0){
        console.log('\033[92mSUCCESS\033[0m: model has been created in %s.', program.output);
      } else {
        console.log('\033[91mFAIL\033[0m: could not build the model (%s).', code);
      }
    });
  } else {
    console.log('\033[91mFAIL\033[0m: could not build the model (%s).', code);
  }

});
