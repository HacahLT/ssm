#!/usr/bin/env node

var program = require('commander')
  , colors = require('colors')
  , os = require('os')
  , fs = require('fs')
  , path = require('path')
  , Squirrel = require('dpkg-squirrel')
  , resolvePath = require('../lib/util').resolvePath;

program  
  .usage('[package.json] [options]')
  .option('-c, --concurrency <concurrency>', 'run the analytics pipeline processing independent tasks in parallel (up to the concurrency limit which default to the number of cpus).', parseInt, os.cpus().length)
  .option('-q, --quiet', 'silence')
  .parse(process.argv);

var pathDpkg = (program.args[0]) ? resolvePath(program.args[0]): path.resolve('package.json');
try {
  var dpkg = JSON.parse(fs.readFileSync(pathDpkg));
} catch (e) {
  console.error('\033[91mFAIL\033[0m: ' + e.message);
  process.exit(1);
}
var dpkgRoot = path.dirname(pathDpkg);

function fail(err){
  throw err;
  console.error('\033[91mFAIL\033[0m: ' + err.message);
  process.exit(1);
};

var reDpkgRoot = new RegExp(dpkgRoot, 'g');

//make tasks
var squirrel = new Squirrel(dpkg, {concurrency: program.concurrency, root: dpkgRoot});

if(!program.quiet){
  console.log('starting an async queue (concurrency: %d)...', program.concurrency);
  squirrel.on('stage', function(msg){console.log('\033[94mINFO\033[0m: %s', msg)});
  squirrel.on('step', function(msg){
    msg = msg.replace(reDpkgRoot, '$ROOT'); //shorten output
    console.log('%s'.grey, msg);
  });
  squirrel.on('wrn', function(msg){console.log('\033[93mWARNING\033[0m: (%s)', msg)});
}
squirrel.on('error', function(msg){
  msg = msg.replace(reDpkgRoot, '$ROOT'); //shorten output
  console.error('\033[91mFAIL:\033[0m ' + msg.grey);
});

squirrel.start(function(err, newDpkg){
  if(err) return fail(err);
  fs.writeFile(pathDpkg, JSON.stringify(newDpkg, null, 2), function(err){
    if(err) return fail(err);
    if(!program.quiet){
      console.log('\033[92mSUCCESS\033[0m: Pipeline completed, %s has been appended.', pathDpkg);
    }
  });
});
