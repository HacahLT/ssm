#!/usr/bin/env node

var program = require('commander')
  , os = require('os')
  , fs = require('fs')
  , path = require('path')
  , util = require('util')
  , async = require('async')
  , minimatch = require("minimatch")
  , glob = require('glob')
  , clone = require('clone')
  , spawn = require('child_process').spawn
  , resolvePath = require('../lib/util').resolvePath;

program
  .option('-w, --walltime <w>', 'walltime in the format hh:mm:ss', '01:00:00')
  .option('-c, --threads <threads>', 'run the design locally using an async queue to process independent tasks in parallel (up to the concurrency limit which default to the number of cpus).', parseInt)
  .option('-d, --cwd <cwd>', 'current working directory of the child processes.', resolvePath, process.cwd())
  .option('-f, --force', 'just do it.')
  .parse(process.argv);

if (!program.args[0]) {
  console.error('\033[91mFAIL\033[0m: Invalid usage, ssm run <datapackage.json>');
  process.exit(1);
} else { //resolve ~ (if any)
  program.args[0] = resolvePath(program.args[0]);
}

//check walltime
if(! (/^[0-9][0-9]:[0-9][0-9]:[0-9][0-9]$/.test(program.walltime))){
  console.error('\033[91mFAIL\033[0m: Invalid walltime format, has to be hh:mm:ss');
  process.exit(1);  
};

var pkg = JSON.parse(fs.readFileSync(path.normalize(program.args[0])));
var pkgRoot = path.dirname(program.args[0]);
var tasks = pkg.analysis[0].data;

//make tasks
var concurrency = (!program.threads) ? os.cpus().length : program.threads;
var walltime = program.walltime.split(':');
walltime = (parseFloat(walltime[0], 10)*60*60 + parseFloat(walltime[1], 10)*60 + parseFloat(walltime[2], 10))*1000;

console.log('\033[94mINFO\033[0m: starting an async queue (concurrency: %d)', concurrency);

//create the queue
var q = async.queue(function (task, callback) {
  runTask(task, walltime, callback);
}, concurrency);


q.drain = function(){
  console.log('\033[94mINFO\033[0m: all the tasks has been processed');
};


/**
 * For each input of inputs, map an object with a pattern property
 * (optional) and a path property containing a list of path
 * corresponding to pattern
 */
function addPaths(inputs, resources, callback){

  async.map(inputs, function(input, cb){
    var names, paths;

    if('resource' in input){ 

      names = resources
        .map(function(x){return x.name})
        .filter(minimatch.filter(input.resources, {matchBase: true}));

      paths = resources
        .filter(function(x){return names.indexOf(x.name) !== -1})
        .map(function(x){return path.resolve(pkgRoot, x.path)});

      cb(null, paths);
    } else if ('path' in input){ 

      glob(path.resolve(pkgRoot, input.path), {matchBase: true}, function(err, paths){
        cb(err, paths);
      });
    } else {
      
      cb(new Error('invalid input'));
    }
  }, function(err, pathss){
    if (err) return callback(err);
    
    inputs.forEach(function(input, i){
      input.paths = pathss[i];
    });

    callback(null, inputs);

  });

};


/**
 * inputs have an extra paths (list of path property) we add an extra
 * data property ({id: input:})
 */
function addData(inputs, callback){
  var i = 0;
  (function loader(){

    async.map(inputs[i].paths, function(path, cb2){

      fs.readFile(path, function(err, data){
        if(err) return cb2(null, null);
        
        if (inputs[i].collection){
          try{
            data = JSON.parse(data);
          } catch(e){
            return cb2(e);        
          }

          data = data.map(function(x, i){
            return {id:i.toString(), input: JSON.stringify(x)};
          });

          cb2(null, data);

        } else {
          
          var re = new RegExp(inputs[i].path.replace('*', '(.*)'));
          var id = path.match(re)[1];

          cb2(null, {id: id, input: data});
        }
        
      });
      
    }, function(err, data){

      if(err) return callback(err);
      inputs[i].data = (inputs[i].collection)? data[0]: data;

      if(++i < inputs.lenght){
        loader();
      } else {
        callback(null, inputs);
      }

    });
    
  })();

};



var map = pkg.analysis[0].data;
var i=0;
var j=0;

(function pushTask(){
  
  addPaths(map[i].inputs, pkg.resources, function(err){
    if(err) throw(err);
    addData(map[i].inputs, function(err){
      if(err) throw(err);

      var taskBatch = makeTaskBatch(map[i]);
      
      if(!taskBatch.length){
        if(++i <map.length){
          rmPrevOutputs(map[i-1].outputs, pkgRoot, function(err){
            pushTask();
          });
        }
      } else {

        mkdirpOutputs(map[i].outputs, pkgRoot, function(err){
          j=0;
          q.push(taskBatch, function(err){
            if(err) throw(err);

            if (++j >= taskBatch.length){
              if (++i <map.length) {
                rmPrevOutputs(map[i-1].outputs, pkgRoot, function(err){
                  pkgOutputs(map[i].outputs, pkg, pkgRoot, function(err){
                    pushTask();
                  });
                });
              }
            }
          });
        });

      }

    });
  });
  
})();


function mkdirpOutputs(outputs, root, callback){

//  var dirs;
//  outputs.forEach(function(x, i){
//    dirs.push(path.dirname(path.join(root, x.path)));
//    if( ('save' in x) && ('path' in x.save)){
//      dirs.push(path.dirname(path.join(root, x.save.path)));
//    }
//  });
//
//  async.each(dirs, mkdirp, callback);

  callback(null);

}


function rmPrevOutputs(prevOutputs, pkgRoot, callback){
  callback(null);
}


function pkgOutputs(outputs, pkg, pkgRoot, callback){
  callback(null);
}



function makeTaskBatch(step){

  var batch = [];

  for(var i=0; i<step.inputs.length; i++){    
    for(var j=0; j<step.inputs[i].data.length; j++){
      if(step.inputs[i].data[j]){
        batch.push(
          {
            command: path.join(program.cwd, step.command),
            args: step.args.map(function(arg){              
              if(arg.indexOf('$ROOT') !== -1){
                var x = arg.replace('$ROOT', '');
                return path.join(pkgRoot, x);
              } else if (arg.indexOf('*') !== -1){
                return arg.replace('*', step.inputs[i].data[j].id);
              } else {
                return arg;
              }
            }),
            input: step.inputs[i].data[j].input,
            options: {
              cwd: program.cwd
            }
          }
        )
      }
    }
  }

  return batch;

};


/**
 * walltime is in millisec
 */
function runTask(task, walltime, callback){

  console.log(task.options);
  var prog = spawn(task.command, task.args, task.options);
  prog.on('error', console.log);

  prog.stdout.resume(); // start the flow of data, discarding it.

//  prog.stderr.pipe(process.stdout);
//  prog.stdout.pipe(process.stdout);

  prog.stdin.write(task.input+'\n', encoding="utf8");

  var timeoutId = setTimeout(function(){        
    console.error('\033[93mWARNING\033[0m: walltime overshoot for task %j', task);
    prog.kill();
  }, walltime);

  prog.on('exit', function (code) {
    clearTimeout(timeoutId);   

    if (code !== 0) {
      callback(new Error(util.format('task %s\nexited with code %d', task.command + ' ' + task.args.join(' '), code)));
    } else {
      console.log('\033[94mINFO\033[0m: task %s\nexited with code %d', task.command + ' ' + task.args.join(' '), code);
      callback(null);
    }
  });

};
