#!/usr/bin/env node

var program = require('commander')
  , fs = require('fs')
  , path = require('path')
  , async = require('async')
  , resolvePath = require('../lib/util').resolvePath
  , bestDpkg = require('../lib/reduce');

program
  .option('-b, --by <keyword>', 'reduce by DIC, AICc, AIC, log_ltp, log_likelihood, sum_squares', 'log_likelihood')
  .option('-s, --summary <path>', 'cp the best summary to the provided path', resolvePath)
  .option('-t, --trace <path>', 'cp the best trace to the provided path', resolvePath)
  .option('-x, --traj <path>',  'cp the best traj to the provided path', resolvePath)
  .option('-v, --verbose', 'verbose mode')
  .parse(process.argv);

if(!program.args[0]) {
  console.error('\033[91mFAIL\033[0m: Invalid usage, ssm reduce <root> [options]');
  process.exit(1);
}

if(['DIC', 'AICc', 'AIC', 'log_ltp', 'log_likelihood', 'sum_squares'].indexOf(program.by) === -1){
  console.error('\033[91mFAIL\033[0m: invalid argument for --by'); 
  process.exit(1);
}

var root = resolvePath(program.args[0]);

function copyFile(source, target, callback) {
  if(path.resolve(source) === path.resolve(target)){
    return callback(null);
  }

  var hasCallbacked = false;

  function done(err) {
    if (!hasCallbacked) {
      callback(err);
      hasCallbacked = true;
    }
  }

  var r = fs.createReadStream(source);
  r.on("error", function(err) {
    done(err);
  });
  var w = fs.createWriteStream(target);
  w.on("error", function(err) {
    done(err);
  });
  w.on("finish", function(ex) {
    done(null);
  });
  r.pipe(w);

};


bestDpkg(root, program, function(err, dpkg, dpkgPath){

  if(err){
    console.error('\033[91mFAIL\033[0m: ' + err.message); 
    process.exit(1);
  }

  var id = dpkg.resources.filter(function(x){return x.name === 'summary';})[0].data.id;

  //copy files
  async.parallel([
    function(cb){ 
      if(program.summary){
        copyFile(dpkgPath, program.summary, cb);
      } else if (!program.verbose){
        console.log(dpkg); //for pipes to S|S|M C algo
        cb(null);
      } else {
        cb(null);
      }        
    },
    function(cb){ 
      if(program.trace){
        copyFile(path.join(root, 'trace_' + id +'.csv'), program.trace, cb);
      } else {
        cb(null);
      }
    },
    function(cb){ 
      if(program.traj){
        copyFile(path.join(root, 'X_' + id +'.csv'), program.traj, cb);
      } else {
        cb(null);
      }
    }
  ], function(err, res){
    if(err){
      console.error('\033[91mFAIL\033[0m: ' + err.message); 
      process.exit(1);
    }
  });

});

