#!/usr/bin/env node

var program = require('commander')
  , fs = require('fs')
  , tv4 = require("tv4")
  , path = require('path')
  , spawn = require('child_process').spawn
  , resolvePath = require('../lib/util').resolvePath
  , installModel = require('../lib/install')
  , validate = require('../lib/validate')
  , colors = require('colors')
  , request = require('request')
  , Dpkg = require('data-streams')
  , mime = require('mime')
  , async = require('async')
  , links = require('../lib/links')
  , EventEmitter = require('events').EventEmitter;

var pkgSchema = require('../json-schema/package-schema.json');

program
  .usage('[package.json] [options]')
  .option('-q, --quiet', 'silence')
  .option('-s, --src', 'keep the source of the templated code')
  .option('-n, --nodeps', 'do not install the dataDependencies')
  .parse(process.argv);

var pathDpkg = (program.args[0]) ? resolvePath(program.args[0]): path.resolve('package.json')
  , dpkgRoot = path.dirname(pathDpkg);

try {
  var dpkg = JSON.parse(fs.readFileSync(pathDpkg));
} catch (e) {
  console.error('\033[91mFAIL\033[0m: ' + e.message);
  process.exit(1);
}

// check that package.json complies with standard package.json requirements
if( !tv4.validate(dpkg, pkgSchema) ){
  console.error('\033[91mFAIL\033[0m: ' + tv4.error.message);
  process.exit(1);
}

//logging
var emitter = new EventEmitter();
if(!program.quiet){
  emitter.on('log', function(msg){
    console.log(msg);
  });
  emitter.on('success', function(msg){
    console.log('\033[92mSUCCESS\033[0m: %s', msg);
  });
  emitter.on('logEol', function(msg){
    process.stdout.write(msg);
  });
}
emitter.on('error', function(msg){
  console.error('\033[91mFAIL\033[0m: ' + msg);
});
emitter.on('errorEol', function(msg){
  process.stderr.write('\033[91mFAIL\033[0m: ' + msg);
});


//install dataDependencies

logHttp = function(methodCode, reqUrl){
  emitter.emit('log', 'ssm'.grey + ' http '.green + methodCode.toString().magenta + ' ' + reqUrl.replace(':80/', '/'));
};


//cache all the deps
var toFetch = dpkg.model.inputs.concat(dpkg.model.data).filter(function(x) {return ('require' in x) && ('datapackage' in x.require);});

async.series([
  function(callback){
    if(('dataDependencies' in dpkg) && !program.nodeps){
      emitter.emit('log', 'INFO:'.blue + ' Installing data dependencies...');
      var mydpkg = new Dpkg(dpkg, dpkgRoot);

      var dataPath = path.join(dpkgRoot, 'data');
      fs.mkdir(dataPath, function(err){
        //ignore error if data exist already
        
        async.each(toFetch, function(r, cb){
          
          var rurl = mydpkg._url(r.require);
          logHttp('GET', rurl);
          var req = request(rurl);
          req.on('response', function(resp){            
            var hasCallbacked = false;            
            logHttp(resp.statusCode, rurl);
            if(resp.statusCode >= 400){
              resp.resume();
              return callback(new Error(resp.statusCode));
            } 

            var filename =  r.name + '.' +mime.extension(resp.headers['content-type']);
            resp
              .on('error', function(err){
                if(!hasCallbacked){
                  hasCallbacked = true;
                  cb(err);
                }
              })
              .pipe(fs.createWriteStream(path.join(dataPath, filename)))
              .on('finish', function(){
                if(!hasCallbacked) cb(null);
              });
            
          });
          
        }, callback);
      });
    } else {
      callback(null);
    }
  },

  function(callback){
    callback(null);
    var priorsToFetch = dpkg.model.inputs.filter(function(x) {return ('require' in x) && !('fields' in x.require);});
    links.resolve(dpkgRoot, dpkg, priorsToFetch, function(err, rlinks){
      if(err) return callback(err);

//      try {
//        validate(dpkg, rlinks, emitter);
//      } catch(e){
//        return callback(e);
//      }

      emitter.emit('log', 'Building the model...');
      installModel(dpkgRoot, dpkg, path.join(dpkgRoot, 'bin'), program.src, emitter, callback);
    });
  }

], function(err){
  if(err){
    console.error('\033[91mFAIL\033[0m: ' + err.message);
    process.exit(1);
  }
});
